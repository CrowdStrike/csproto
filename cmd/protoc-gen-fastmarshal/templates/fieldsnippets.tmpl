{{/* SizeOfString - calculate the encoded size of a string field */}}
{{ define "SizeOfString" }}
{{- if ne (.Desc.Cardinality | string) "repeated" -}}
    {{- if eq (.Desc.Syntax | string) "proto2" -}}
    if m.{{ .GoName }} != nil {
        if l = len(*m.{{ .GoName }}); l > 0 {
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
        }
    }
    {{- else -}}
    if l = len(m.{{ .GoName }}); l > 0 {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
    }
    {{- end -}}
{{- else -}}
    for _, sv := range m.{{ .GoName }} {
        if l = len(sv); l > 0 {
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
        }
    }
{{- end -}}
{{ end }}
{{/* SizeOfBytes - calculate the encoded size of a bytes field */}}
{{ define "SizeOfBytes" }}
{{- if ne (.Desc.Cardinality | string) "repeated" -}}
    if l = len(m.{{ .GoName }}); l > 0 {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
    }
{{- else -}}
    for _, bv := range m.{{ .GoName }} {
        if l = len(bv); l > 0 {
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
        }
    }
{{- end -}}
{{ end }}
{{/* SizeOfInt - calculate the encoded size of an integer field */}}
{{ define "SizeOfInt" }}
{{- if ne (.Desc.Cardinality | string) "repeated" -}}
    {{- if eq (.Desc.Syntax | string) "proto2" -}}
    if m.{{.GoName}} != nil {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(*m.{{.GoName}}))
    }
    {{- else -}}
    sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(m.{{.GoName}}))
    {{- end -}}
{{- else if .Desc.IsPacked -}}
    if len(m.{{.GoName}}) > 0 {
        sz += csproto.SizeOfTagKey({{.Desc.Number}})
        l = 0
        for _, iv := range m.{{.GoName}} {
            l += csproto.SizeOfVarint(uint64(iv))
        }
        sz += csproto.SizeOfVarint(uint64(l)) + l
    }
{{- else -}}
    for _, iv := range m.{{.GoName}} {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(iv))
    }
{{- end -}}
{{ end }}
{{/* SizeOfBool - calculate the encoded size of a boolean field */}}
{{ define "SizeOfBool" }}
{{- if ne (.Desc.Cardinality | string) "repeated" -}}
    {{- if eq (.Desc.Syntax | string) "proto2" -}}
    if m.{{.GoName}} != nil {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + 1
    }
    {{- else -}}
    sz += csproto.SizeOfTagKey({{.Desc.Number}}) + 1
    {{- end -}}
{{- else if .Desc.IsPacked -}}
    if l = len(m.{{.GoName}}); l > 0 {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
    }
{{- else -}}
    if n := len(m.{{.GoName}}); n > 0 {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + n
    }
{{- end -}}
{{ end }}
{{/* SizeOfSInt - calculate the encoded size of a sint32 or sint64 field */}}
{{ define "SizeOfSInt" }}
{{- if ne (.Desc.Cardinality | string) "repeated" -}}
    {{- if eq (.Desc.Syntax | string) "proto2" -}}
    if m.{{.GoName}} != nil {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfZigZag(uint64(*m.{{.GoName}}))
    }
    {{- else -}}
    sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfZigZag(uint64(m.{{.GoName}}))
    {{- end -}}
{{- else if .Desc.IsPacked -}}
    if len(m.{{.GoName}}) > 0 {
        sz += csproto.SizeOfTagKey({{.Desc.Number}})
        l = 0
        for _, iv := range m.{{.GoName}} {
            l += csproto.SizeOfZigZag(uint64(iv))
        }
        sz += csproto.SizeOfVarint(uint64(l)) + l
    }
{{- else -}}
    for _, val := range m.{{.GoName}} {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfZigZag(uint64(val))
    }
{{- end -}}
{{ end }}
{{/* SizeOfFixed - calculate the encoded size of a fixed-width field */}}
{{ define "SizeOfFixed" }}
{{- if ne (.Desc.Cardinality | string) "repeated" -}}
    {{- if eq (.Desc.Syntax | string) "proto2" -}}
    if m.{{.GoName}} != nil {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + {{if eq (.Desc.Kind | string) "fixed32" "sfixed32" "float"}}4{{else}}8{{end}}
    }
    {{- else -}}
    sz += csproto.SizeOfTagKey({{.Desc.Number}}) + {{if eq (.Desc.Kind | string) "fixed32" "sfixed32" "float"}}4{{else}}8{{end}}
    {{- end -}}
{{- else if .Desc.IsPacked -}}
    if l = len(m.{{.GoName}}); l > 0 {
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + (l * {{if eq (.Desc.Kind | string) "fixed32" "sfixed32" "float"}}4{{else}}8{{end}})
    }
{{- else -}}
    if l = len(m.{{.GoName}}); l > 0 {
        sz += l * (csproto.SizeOfTagKey({{.Desc.Number}}) + {{if eq (.Desc.Kind | string) "fixed32" "sfixed32" "float"}}4{{else}}8{{end}})
    }
{{- end -}}
{{ end }}
{{/* SizeOfMapEntry - calculates the encoded size of a map entry "message" field */}}
{{ define "SizeOfMapEntry" }}
{{- $mapField := . -}}
{{- $mapDesc := .Desc -}}
{{- $key := .Desc.MapKey -}}
{{- $val := .Desc.MapValue -}}
    for k, v := range m.{{.GoName}} {
    {{ with .Desc.MapKey -}}
        // size of key (always has an internal tag of 1)
    {{ if eq (.Kind | string) "int32" "int64" "uint32" "uint64" -}}
        keySize := 1 + csproto.SizeOfVarint(uint64(k))
    {{- else if eq (.Kind | string) "string" -}}
        l = len(k)
        keySize := 1 + csproto.SizeOfVarint(uint64(l)) + l
    {{- else if eq (.Kind | string) "sint32" "sint64" -}}
        keySize := 1 + csproto.SizeOfZigZag(uint64(k))
    {{- else if eq (.Kind | string) "fixed32" "sfixed32" -}}
        keySize := 5
    {{- else if eq (.Kind | string) "fixed64" "sfixed64" -}}
        keySize := 9
    {{- else -}}
        panic(fmt.Errorf("unknown/unsupported Protobuf field kind '{{.Kind | string}}' for map key for field {{$mapField.Name}} (tag={{$mapDesc.Number}})"))
    {{- end }}
    {{- end }}
    {{- with .Desc.MapValue }}
        // size of value (always has an internal tag of 2)
    {{ if eq (.Kind | string) "int32" "int64" "uint32" "uint64" "enum" -}}
        valueSize := 1 + csproto.SizeOfVarint(uint64(v))
        sz += csproto.SizeOfTagKey({{$mapDesc.Number}}) + csproto.SizeOfVarint(uint64(keySize + valueSize)) + keySize + valueSize
    {{- else if eq (.Kind | string) "string" "bytes" -}}
        if l = len(v); l > 0 {
            valueSize := 1 + csproto.SizeOfVarint(uint64(l)) + l
            sz += csproto.SizeOfTagKey({{$mapDesc.Number}}) + csproto.SizeOfVarint(uint64(keySize + valueSize)) + keySize + valueSize
        }
    {{- else if eq (.Kind | string) "sint32" "sint64" -}}
        valueSize := 1 + csproto.SizeOfZigZag(uint64(v))
        sz += csproto.SizeOfTagKey({{$mapDesc.Number}}) + csproto.SizeOfVarint(uint64(keySize + valueSize)) + keySize + valueSize
    {{- else if eq (.Kind | string) "fixed32" "sfixed32" "float" -}}
        _ = v
        sz += csproto.SizeOfTagKey({{$mapDesc.Number}}) + csproto.SizeOfVarint(uint64(keySize + 5)) + keySize + 5
    {{- else if eq (.Kind | string) "fixed64" "sfixed64" "double" -}}
        _ = v
        sz += csproto.SizeOfTagKey({{$mapDesc.Number}}) + csproto.SizeOfVarint(uint64(keySize + 9)) + keySize + 9
    {{- else if eq (.Kind | string) "message" -}}
        if v != nil {
            l = csproto.Size(v)
            valueSize := 1 + csproto.SizeOfVarint(uint64(l)) + l
            sz += csproto.SizeOfTagKey({{$mapDesc.Number}}) + csproto.SizeOfVarint(uint64(keySize + valueSize)) + keySize + valueSize
        }
    {{- else -}}
        panic(fmt.Errorf("unknown/unsupported Protobuf field kind '{{.Kind | string}}' for map value for field {{$mapField.Desc.Name}} (tag={{$mapDesc.Number}})"))
    {{- end }}
    {{- end }}
    }
{{ end }}
{{/* SizeOfMessage - calculate the encoded size of a message field */}}
{{ define "SizeOfMessage" }}
{{- if .Desc.IsMap -}}
    {{- template "SizeOfMapEntry" . -}}
{{- else if ne (.Desc.Cardinality | string) "repeated" -}}
    if m.{{.GoName}} != nil {
        l = csproto.Size(m.{{.GoName}})
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
    }
{{- else -}}
    for _, val := range m.{{.GoName}} {
        if l = csproto.Size(val); l > 0 {
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
        }
    }
{{- end -}}
{{ end }}
{{/* SizeOfField - calculate the size of a message field */}}
{{ define "SizeOfField" }}
    {{- with $field := . -}}
    {{- with $kind := ($field.Desc.Kind | string) -}}
    {{- if eq $kind "int32" "int64" "uint32" "uint64" "enum" -}}{{ template "SizeOfInt" $field }}{{- end -}}
    {{- if eq $kind "string" -}}{{ template "SizeOfString" $field }}{{- end -}}
    {{- if eq $kind "bytes" -}}{{ template "SizeOfBytes" $field }}{{- end -}}
    {{- if eq $kind "bool" -}}{{ template "SizeOfBool" $field }}{{- end -}}
    {{- if eq $kind "sint32" "sint64" -}}{{ template "SizeOfSInt" $field }}{{- end -}}
    {{- if eq $kind "fixed32" "sfixed32" "float" "fixed64" "sfixed64" "double" -}}{{ template "SizeOfFixed" $field }}{{- end -}}
    {{- if eq $kind "message" -}}{{ template "SizeOfMessage" $field }}{{- end -}}
    {{- end -}}
    {{- end -}}
{{ end }}
{{/* SizeOfOneOf - calculate the size of a oneof field */}}
{{ define "SizeOfOneOf" }}
{{- $msgDef := .Parent -}}
    // {{.GoName}} (oneof)
    if m.{{.GoName}} != nil {
        switch typedVal := m.{{.GoName}}.(type) {
        {{ range .Fields }}case *{{ $msgDef.Desc.Name }}_{{.GoName}}:
            {{- $kind := (.Desc.Kind | string) -}}
            // {{.Desc.Name}} ({{.Desc.Number}},{{.Desc.Kind}})
            {{ if eq $kind "bool" -}}
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + 1
            {{- else if eq $kind "fixed32" "sfixed32" "float" -}}
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + 4
            {{- else if eq $kind "fixed64" "sfixed64" "double" -}}
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + 8
            {{- else if eq $kind "string" "bytes" -}}
            l = len(typedVal.{{.GoName}})
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
            {{- else if eq $kind "int32" "int64" "uint32" "uint32" "uint64" "enum" -}}
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(typedVal.{{.GoName}}))
            {{- else if eq $kind "sint32" "sint64" -}}
            sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfZigZag(uint64(typedVal.{{.GoName}}))
            {{- else if eq $kind "message" -}}
            sz += csproto.Size(typedVal.{{.GoName}})
            {{- end }}
        {{ end -}}
        default:
            _ = typedVal // ensure no unused variable
        }
    }
{{ end }}
{{/* SizeOfExtension - calculate the size of a proto2 extension field */}}
{{ define "SizeOfExtension" }}
{{- $kind := (.Desc.Kind) | string -}}
    // extension field - {{ .Desc.Name }} ({{.Desc.Kind}},{{.Desc.Cardinality}})
    if extVal, _ := csproto.GetExtension(m, E_{{.GoIdent.GoName}}); extVal != nil {
        {{ if eq $kind "bool" -}}
        _ = extVal
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + 1
        {{- else if eq $kind "fixed32" "sfixed32" "float" -}}
        _ = extVal
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + 4
        {{- else if eq $kind "fixed64" "sfixed64" "double" -}}
        _ = extVal
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + 8
        {{- else -}}
        {{ if eq $kind "int32" -}}
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(extVal.(int32)))
        {{- else if eq $kind "int64" -}}
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(extVal.(int64)))
        {{- else if eq $kind "uint32" -}}
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(int64(uint64(extVal.(uint32))))
        {{- else if eq $kind "uint64" -}}
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(extVal.(uint64))
        {{- else if eq $kind "sint32" -}}
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfZigZag(uint64(extVal.(int32)))
        {{- else if eq $kind "sint64" -}}
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfZigZag(uint64(extVal.(int64)))
        {{- else if eq $kind "enum" -}}
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(extVal.({{.Enum.GoIdent}})))
        {{- else if eq $kind "string" -}}
        s := extVal.(string)
        l = len(s)
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
        {{- else if eq $kind "bytes" -}}
        b := extVal.([]byte)
        l = len(b)
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
        {{- else if eq $kind "message" -}}
        l = csproto.Size(extVal)
        sz += csproto.SizeOfTagKey({{.Desc.Number}}) + csproto.SizeOfVarint(uint64(l)) + l
        {{- else -}}
        panic(fmt.Errorf("unknown/unrecognized field type {{ $kind }} (%T) for field {{.GoIdent.GoName}}", extVal))
        {{- end -}}
        {{- end -}}
    }
{{ end }}
{{/* MarshalNumber - generates the snippet to marshal a number (bool,int32,int64,uint32,uint64,sint32,sint64,fixed32,float,fixed64,double) field */}}
{{ define "MarshalNumber" }}
{{- $cardinality := (.Desc.Cardinality | string) -}}
{{- $method := protoNumberEncodeMethod (.Desc.Kind | string) .Desc.IsPacked -}}
{{- if eq $cardinality "repeated" -}}
    {{- if .Desc.IsPacked -}}
    if len(m.{{.GoName}}) > 0 {
        enc.{{$method}}({{.Desc.Number}}, m.{{.GoName}})
    }
    {{- else -}}
    for _, val := range m.{{.GoName}} {
        enc.{{ $method }}({{.Desc.Number}}, val)
    }
    {{- end -}}
{{- else -}}
    {{- if eq (.Desc.Syntax | string) "proto2" }}
        {{- if eq $cardinality "required" -}}
    if m.{{.GoName}} == nil {
        return fmt.Errorf("required field '{{.GoName}}' has no value")
    }
    enc.{{ $method }}({{.Desc.Number}}, *m.{{.GoName}})
        {{- else -}}
    if m.{{.GoName}} != nil {
        enc.{{ $method }}({{.Desc.Number}}, *m.{{.GoName}})
    }
        {{- end -}}
    {{- else -}}
    enc.{{$method}}({{.Desc.Number}}, m.{{.GoName}})
    {{- end -}}
{{- end -}}
{{ end }}
{{/* MarshalString - generates the snippet to marshal a string field */}}
{{ define "MarshalString" }}
{{- $cardinality := (.Desc.Cardinality | string) -}}
{{- if eq $cardinality "repeated" -}}
    for _, val := range m.{{ .GoName }} {
        enc.EncodeString({{.Desc.Number}}, val)
    }
{{- else -}}
    {{- if eq (.Desc.Syntax | string) "proto2" -}}
        {{- if eq $cardinality "required" -}}
    if m.{{.GoName}} == nil || len(*m.{{.GoName}}) == 0 {
        return fmt.Errorf("required field '{{.GoName}}' has no value")
    }
    enc.EncodeString({{.Desc.Number}}, *m.{{.GoName}})
        {{- else -}}
    if m.{{ .GoName }} != nil && len(*m.{{.GoName}}) > 0 {
        enc.EncodeString({{.Desc.Number}}, *m.{{.GoName}})
    }
        {{- end -}}
    {{- else -}}
    if len(m.{{.GoName}}) > 0 {
        enc.EncodeString({{.Desc.Number}}, m.{{.GoName}})
    }
    {{- end -}}
{{- end -}}
{{ end }}
{{/* MarshalBytes - generates the snippet to marshal a bytes field */}}
{{ define "MarshalBytes" }}
{{- $cardinality := (.Desc.Cardinality | string) -}}
{{- if eq $cardinality "repeated" -}}
    for _, val := range m.{{ .GoName }} {
        enc.EncodeBytes({{.Desc.Number}}, val)
    }
{{- else if eq $cardinality "required" -}}{{/* only valid for proto2 */}}
    if len(m.{{.GoName}}) == 0 {
        return fmt.Errorf("required field '{{.GoName}}' has no value")
    }
    enc.EncodeBytes({{.Desc.Number}}, m.{{.GoName}})
{{- else -}}
    if len(m.{{.GoName}}) > 0 {
        enc.EncodeBytes({{.Desc.Number}}, m.{{.GoName}})
    }
{{- end -}}
{{ end }}
{{/* MarshalSFixed - generates the snippet to marshal a fixed-size signed integer (sfixed32, sfixed64) */}}
{{ define "MarshalSFixed" }}
{{- $cardinality := (.Desc.Cardinality | string) -}}
{{- $bitSize := (.Desc.Kind | string | trunc -2) -}}
{{- $packed := "" -}}
{{- $signed := "" -}}
{{- if .Desc.IsPacked -}}
    {{- $packed = "Packed" -}}
    {{- if eq (.Desc.Kind | string | trunc 1) "s" -}}
        {{- $signed = "S" -}}
    {{- end -}}
{{- end -}}
{{- $method := printf "Encode%s%sFixed%s" $packed $signed $bitSize -}}
{{- $cast := printf "uint%s" $bitSize -}}
{{- if eq $cardinality "repeated" -}}
    {{- if .Desc.IsPacked -}}
    if len(m.{{.GoName}}) > 0 {
        enc.{{$method}}({{.Desc.Number}}, m.{{.GoName}})
    }
    {{- else -}}
    for _, val := range m.{{ .GoName }} {
        enc.{{ $method }}({{.Desc.Number}}, {{$cast}}(val))
    }
    {{- end -}}
{{- else -}}
    {{- if eq (.Desc.Syntax | string) "proto2" -}}
        {{- if eq $cardinality "required" -}}
    if m.{{.GoName}} == nil {
        return fmt.Errorf("required field '{{.GoName}}' has no value")
    }
    enc.{{ $method }}({{.Desc.Number}}, {{$cast}}(*m.{{.GoName}}))
        {{- else -}}
    if m.{{.GoName}} != nil {
        enc.{{ $method }}({{.Desc.Number}}, {{$cast}}(*m.{{.GoName}}))
    }
        {{- end -}}
    {{- else -}}
    enc.{{ $method }}({{.Desc.Number}}, {{$cast}}(m.{{.GoName}}))
    {{- end -}}
{{- end -}}
{{ end }}
{{/* MarshalEnum - generates the snippet to marshal an enum field */}}
{{ define "MarshalEnum" }}
{{- $cardinality := (.Desc.Cardinality | string) -}}
{{- if eq $cardinality "repeated" -}}
    {{- if .Desc.IsPacked -}}
    if l := len(m.{{.GoName}}); l > 0 {
        ivs := make([]int32, l)
        for i, v := range m.{{.GoName}} {
            ivs[i] = int32(v)
        }
        enc.EncodePackedInt32({{.Desc.Number}}, ivs)
    }
    {{- else -}}
    for _, v := range m.{{ .GoName }} {
        enc.EncodeInt32({{.Desc.Number}}, int32(v))
    }
    {{- end -}}
{{- else -}}
    {{- if eq (.Desc.Syntax | string) "proto2" -}}
        {{- if eq $cardinality "required" -}}
    if m.{{.GoName}} == nil {
        return fmt.Errorf("required field '{{.GoName}}' has no value")
    }
    enc.EncodeInt32({{.Desc.Number}}, int32(*m.{{.GoName}}))
        {{- else -}}
    if m.{{ .GoName }} != nil {
        enc.EncodeInt32({{.Desc.Number}}, int32(*m.{{.GoName}}))
    }
        {{- end -}}
    {{- else -}}
    enc.EncodeInt32({{.Desc.Number}}, int32(m.{{.GoName}}))
    {{- end -}}
{{- end -}}
{{ end }}
{{/* MarshalMapEntry - generates the snippet to marshal a map entry "message" */}}
{{ define "MarshalMapEntry" }}
{{- $mapField := . -}}
{{- $mapKeyKind := (.Desc.MapKey.Kind | string) -}}
{{- $mapValueKind := (.Desc.MapValue.Kind | string) -}}
    for k, v := range m.{{.GoName}} {
        var l int
        {{ if eq $mapValueKind "int32" "int64" "uint32" "uint64" "enum" -}}
        itemSize := 1 + csproto.SizeOfVarint(uint64(v))
        {{- else if eq $mapValueKind "string" "bytes" -}}
        if l = len(v); l == 0 {
            continue
        }
        itemSize := 1 + csproto.SizeOfVarint(uint64(l)) + l
        {{- else if eq $mapValueKind "sint32" "sint64" -}}
        itemSize := 1 + csproto.SizeOfZigZag(uint64(v))
        {{- else if eq $mapValueKind "fixed32" "sfixed32" "float" -}}
        itemSize := 5
        {{- else if eq $mapValueKind "fixed64" "sfixed64" "double" -}}
        itemSize := 9
        {{- else if eq $mapValueKind "message" -}}
        if v == nil {
            continue
        }
        l = csproto.Size(v)
        itemSize := 1 + csproto.SizeOfVarint(uint64(l)) + l
        {{- else -}}
        panic(fmt.Errorf("unknown/unsupported Protobuf field kind '{{$mapValueKind}}' for map value for field {{$mapField.Desc.Name}} (tag={{$mapField.Desc.Number}})"))
        {{- end }}
        {{ if eq $mapKeyKind "int32" "int64" "uint32" "uint64" "enum" -}}
        itemSize += 1 + csproto.SizeOfVarint(uint64(k))
        {{- else if eq $mapKeyKind "string" -}}
        l = len(k)
        itemSize += 1 + csproto.SizeOfVarint(uint64(l)) + l
        {{- else if eq $mapKeyKind "sint32" "sint64" -}}
        itemSize += 1 + csproto.SizeOfZigZag(uint64(k))
        {{- else if eq $mapKeyKind "fixed32" "sfixed32" -}}
        itemSize += 5
        {{- else if eq $mapKeyKind "fixed64" "sfixed64" -}}
        itemSize += 9
        {{- else -}}
        panic(fmt.Errorf("unknown/unsupported Protobuf field kind '{{$mapKeyKind}}' for map key for field {{$mapField.Desc.Name}} (tag={{$mapField.Desc.Number}})"))
        {{- end }}
        enc.EncodeMapEntryHeader({{$mapField.Desc.Number}}, itemSize)
        {{ if eq $mapKeyKind "int32" "int64" "uint32" "uint64" -}}
        enc.EncodeUInt64(1, uint64(k))
        {{- else if eq $mapKeyKind "string" -}}
        enc.EncodeString(1, k)
        {{- else if eq $mapKeyKind "sint32" "sint64" -}}
        enc.EncodeSInt{{$mapKeyKind | trunc -2}}(1, k)
        {{- else if eq $mapKeyKind "fixed32" "sfixed32" "fixed64" "sfixed64" -}}
        enc.EncodeFixed{{$mapKeyKind | trunc -2}}(uint{{$mapKeyKind | trunc -2}}(1, k))
        {{- end }}
        {{ if eq $mapValueKind "int32" "int64" "uint32" "uint64" "enum" -}}
        enc.EncodeUInt64(2, uint64(v))
        {{- else if eq $mapValueKind "string" "bytes" -}}
        enc.Encode{{$mapValueKind | upperFirst}}(2, v)
        {{- else if eq $mapValueKind "sint32" "sint64" -}}
        enc.EncodeSInt{{$mapValueKind | trunc -2}}(2, v)
        {{- else if eq $mapValueKind "fixed32" "sfixed32" "fixed64" "sfixed64" -}}
        enc.EncodeFixed{{$mapValueKind | trunc -2}}(2, uint{{$mapValueKind | trunc -2}}(v))
        {{- else if eq $mapValueKind "float" "double" -}}
        enc.EncodeFloat{{if eq $mapValueKind "float"}}32{{else}}64{{end}}(2, v)
        {{- else if eq $mapValueKind "message" -}}
        enc.EncodeNested(2, v)
        {{- end }}
    }
{{ end }}
{{/* MarshalMessage - generates the snippet to marshal a nested message field */}}
{{ define "MarshalMessage" }}
{{- $cardinality := (.Desc.Cardinality | string) -}}
{{- if .Desc.IsMap -}}
    {{- template "MarshalMapEntry" . -}}
{{- else if eq $cardinality "repeated" -}}
    for _, mm := range m.{{.GoName}} {
        if err = enc.EncodeNested({{.Desc.Number}}, mm); err != nil {
            return fmt.Errorf("unable to encode message data for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        }
    }
{{- else if eq $cardinality "required" -}}
    if m.{{.GoName}} == nil {
        return fmt.Errorf("required field '{{.GoName}}' has no value")
    }
    if err = enc.EncodeNested({{.Desc.Number}}, m.{{.GoName}}); err != nil {
        return fmt.Errorf("unable to encode message data for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
    }
{{- else -}}
    if m.{{.GoName}} != nil {
        if err = enc.EncodeNested({{.Desc.Number}}, m.{{.GoName}}); err != nil {
            return fmt.Errorf("unable to encode message data for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        }
    }
{{- end -}}
{{ end }}
{{/* MarshalField - generates the snippet to marshal a field */}}
{{ define "MarshalField" }}
{{- with $field := . -}}
{{- with $kind := ($field.Desc.Kind | string) -}}
    {{- if eq $kind "bool" "int32" "int64" "uint32" "uint64" "sint32" "sint64" "fixed32" "float" "fixed64" "double" -}}{{template "MarshalNumber" $field}}{{- end -}}
    {{- if eq $kind "enum" -}}{{template "MarshalEnum" $field}}{{- end -}}
    {{- if eq $kind "string" -}}{{template "MarshalString" $field}}{{- end -}}
    {{- if eq $kind "bytes" -}}{{template "MarshalBytes" $field}}{{- end -}}
    {{- if eq $kind "sfixed32" "sfixed64" -}}{{template "MarshalSFixed" $field}}{{- end -}}
    {{- if eq $kind "message" -}}{{template "MarshalMessage" $field}}{{- end -}}
{{- end -}}
{{- end -}}
{{ end }}
{{/* MarshalOneOf - generates the snippet to marshal a oneof field */}}
{{ define "MarshalOneOf" }}
{{- $msgDef := .Parent -}}
    if m.{{.GoName}} != nil {
        switch typedVal := m.{{.GoName}}.(type) {
        {{ range .Fields }}case *{{ $msgDef.Desc.Name }}_{{.GoName}}: // {{.Desc.Name}} ({{.Desc.Number}},{{.Desc.Kind}})
            {{- $kind := (.Desc.Kind | string) -}}
            {{ if eq $kind "bool" "int32" "int64" "uint32" "uint64" "sint32" "sint64" "fixed32" "float" "fixed64" "double" }}
            enc.{{ protoNumberEncodeMethod (.Desc.Kind | string) false}}({{.Desc.Number}}, typedVal.{{.GoName}})
            {{ else if eq $kind "sfixed32" "sfixed64" }}
            {{- $bitSize := (.Desc.Kind | string | trunc -2) -}}
            enc.{{ printf "EncodeFixed%s" $bitSize }}({{.Desc.Number}}, {{ printf "uint%s" $bitSize }}(typedVal.{{.GoName}}))
            {{ else if eq $kind "enum" }}
            enc.EncodeInt32({{.Desc.Number}}, int32(typedVal.{{.GoName}}))
            {{ else if eq $kind "string" }}
            enc.EncodeString({{.Desc.Number}}, typedVal.{{.GoName}})
            {{ else if eq $kind "bytes" }}
            enc.EncodeBytes({{.Desc.Number}}, typedVal.{{.GoName}})
            {{ else if eq $kind "message" }}
            enc.EncodeNested({{.Desc.Number}}, typedVal.{{.GoName}})
            {{ end -}}
        {{ end -}}
        default:
            _ = typedVal // ensure no unused variable
        }
    }
{{ end }}
{{/* MarshalExtension - generates the snippet to marshal a proto2 extension field */}}
{{ define "MarshalExtension" }}
{{- $kind := (.Desc.Kind) | string -}}
    // extension field - {{ .Desc.Name }} ({{.Desc.Kind}},{{.Desc.Cardinality}})
    var extVal interface{}
    extVal, err = csproto.GetExtension(m, E_{{.GoIdent.GoName}})
    if err != nil {
        return fmt.Errorf("unable to read extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
    } else if extVal != nil {
        {{ if eq $kind "bool" -}}
        enc.EncodeBool({{.Desc.Number}}, extVal.(bool))
        {{- else if eq $kind "int32" -}}
        enc.EncodeInt32({{.Desc.Number}}, extVal.(int32))
        {{- else if eq $kind "int64" -}}
        enc.EncodeInt64({{.Desc.Number}}, extVal.(int64))
        {{- else if eq $kind "uint32" -}}
        enc.EncodeUInt32({{.Desc.Number}}, extVal.(uint32))
        {{- else if eq $kind "uint64" -}}
        enc.EncodeUInt64({{.Desc.Number}}, extVal.(uint64))
        {{- else if eq $kind "sint32" -}}
        enc.EncodeSInt32({{.Desc.Number}}, extVal.(int32))
        {{- else if eq $kind "sint64" -}}
        enc.EncodeSInt64({{.Desc.Number}}, extVal.(int64))
        {{- else if eq $kind "fixed32" "sfixed32" -}}
        enc.EncodeFixed32({{.Desc.Number}}, extVal.(uint32))
        {{- else if eq $kind "float" -}}
        enc.EncodeFloat32({{.Desc.Number}}, extVal.(float32))
        {{- else if eq $kind "fixed64" "sfixed64" -}}
        enc.EncodeFixed64({{.Desc.Number}}, extVal.(uint64))
        {{- else if eq $kind "double" -}}
        enc.EncodeFloat64({{.Desc.Number}}, extVal.(float64))
        {{- else if eq $kind "enum" -}}
        enc.EncodeInt32({{.Desc.Number}}, int32(extVal.({{.Enum.GoIdent}})))
        {{- else if eq $kind "string" -}}
        enc.EncodeString({{.Desc.Number}}, extVal.(string))
        {{- else if eq $kind "bytes" -}}
        enc.EncodeBytes({{.Desc.Number}}, extVal.([]byte))
        {{- else if eq $kind "message" -}}
        if err = enc.EncodeNested({{.Desc.Number}}, extVal); err != nil {
            return fmt.Errorf("unable to encode message data for extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        }
        {{- else -}}
        return fmt.Errorf("unknown/unrecognized field type {{ $kind }} for field {{.GoIdent.GoName}} (tag={{.Desc.Number}})")
        {{- end -}}
    }
{{ end }}
{{/* UnmarshalNumber - generates the snippet to unmarshal a number (bool,int32,int64,uint32,uint64,sint32,sint64,fixed32,float,fixed64,double,enum) field */}}
{{ define "UnmarshalNumber" }}
{{- $syntax := (.Desc.Syntax | string) -}}
{{- $kind := (.Desc.Kind | string) -}}
{{- $cardinality := (.Desc.Cardinality | string) -}}
{{- if eq $kind "bool" -}}
    {{- if eq $cardinality "repeated" -}}
        switch wt {
        case csproto.WireTypeVarint:
            if v, err := dec.DecodeBool(); err != nil {
                return fmt.Errorf("unable to decode boolean value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v)
            }
        case csproto.WireTypeLengthDelimited:
            if v, err := dec.DecodePackedBool(); err != nil {
                return fmt.Errorf("unable to decode packed boolean values for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v...)
            }
        default:
            return fmt.Errorf("incorrect wire type %v for repeated field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint) or 1 (length-delimited)", wt)
        }
    {{- else -}}
        if wt != csproto.WireTypeVarint {
            return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
        }
        if v, err := dec.DecodeBool(); err != nil {
            return fmt.Errorf("unable to decode boolean value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        } else {
            m.{{.GoName}} = {{if eq $syntax "proto2"}}csproto.Bool(v){{else}}v{{end}}
        }
    {{- end -}}
{{- else if eq $kind "int32" -}}
    {{- if eq $cardinality "repeated" -}}
        switch wt {
        case csproto.WireTypeVarint:
            if v, err := dec.DecodeInt32(); err != nil {
                return fmt.Errorf("unable to decode int32 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v)
            }
        case csproto.WireTypeLengthDelimited:
            if v, err := dec.DecodePackedInt32(); err != nil {
                return fmt.Errorf("unable to decode packed int32 values for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v...)
            }
        default:
            return fmt.Errorf("incorrect wire type %v for repeated field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint) or 1 (length-delimited)", wt)
        }
    {{- else -}}
        if wt != csproto.WireTypeVarint {
            return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
        }
        if v, err := dec.DecodeInt32(); err != nil {
            return fmt.Errorf("unable to decode int32 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        } else {
            m.{{.GoName}} = {{if eq $syntax "proto2"}}csproto.Int32(v){{else}}v{{end}}
        }
    {{- end -}}
{{- else if eq $kind "int64" -}}
    {{- if eq $cardinality "repeated" -}}
        switch wt {
        case csproto.WireTypeVarint:
            if v, err := dec.DecodeInt64(); err != nil {
                return fmt.Errorf("unable to decode int64 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v)
            }
        case csproto.WireTypeLengthDelimited:
            if v, err := dec.DecodePackedInt64(); err != nil {
                return fmt.Errorf("unable to decode packed int64 values for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v...)
            }
        default:
            return fmt.Errorf("incorrect wire type %v for repeated field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint) or 1 (length-delimited)", wt)
        }
    {{- else -}}
        if wt != csproto.WireTypeVarint {
            return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
        }
        if v, err := dec.DecodeInt64(); err != nil {
            return fmt.Errorf("unable to decode int64 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        } else {
            m.{{.GoName}} = {{if eq $syntax "proto2"}}csproto.Int64(v){{else}}v{{end}}
        }
    {{- end -}}
{{- else if eq $kind "uint32" -}}
    {{- if eq $cardinality "repeated" -}}
        switch wt {
        case csproto.WireTypeVarint:
            if v, err := dec.DecodeUInt32(); err != nil {
                return fmt.Errorf("unable to decode uint32 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v)
            }
        case csproto.WireTypeLengthDelimited:
            if v, err := dec.DecodePackedUint32(); err != nil {
                return fmt.Errorf("unable to decode packed uint32 values for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v...)
            }
        default:
            return fmt.Errorf("incorrect wire type %v for repeated field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint) or 1 (length-delimited)", wt)
        }
    {{- else -}}
        if wt != csproto.WireTypeVarint {
            return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
        }
        if v, err := dec.DecodeUInt32(); err != nil {
            return fmt.Errorf("unable to decode int32 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        } else {
            m.{{.GoName}} = {{if eq $syntax "proto2"}}csproto.Uint32(v){{else}}v{{end}}
        }
    {{- end -}}
{{- else if eq $kind "uint64" -}}
    {{- if eq $cardinality "repeated" -}}
        switch wt {
        case csproto.WireTypeVarint:
            if v, err := dec.DecodeUInt64(); err != nil {
                return fmt.Errorf("unable to decode uint64 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v)
            }
        case csproto.WireTypeLengthDelimited:
            if v, err := dec.DecodePackedUint64(); err != nil {
                return fmt.Errorf("unable to decode packed uint64 values for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v...)
            }
        default:
            return fmt.Errorf("incorrect wire type %v for repeated field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint) or 1 (length-delimited)", wt)
        }
    {{- else -}}
        if wt != csproto.WireTypeVarint {
            return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
        }
        if v, err := dec.DecodeUInt64(); err != nil {
            return fmt.Errorf("unable to decode uint64 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        } else {
            m.{{.GoName}} = {{if eq $syntax "proto2"}}csproto.Uint64(v){{else}}v{{end}}
        }
    {{- end -}}
{{- else if eq $kind "enum" -}}
    {{- if eq $cardinality "repeated" -}}
        switch wt {
        case csproto.WireTypeVarint:
            if v, err := dec.DecodeInt32(); err != nil {
                return fmt.Errorf("unable to decode int32 enum value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, {{.Enum | getImportPrefix }}{{.Enum.GoIdent.GoName}}(v))
            }
        case csproto.WireTypeLengthDelimited:
            if v, err := dec.DecodePackedInt32(); err != nil {
                return fmt.Errorf("unable to decode packed int32 enum values for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                for _, elem := range v {
                    m.{{.GoName}} = append(m.{{.GoName}}, {{.Enum | getImportPrefix }}{{.Enum.GoIdent.GoName}}(elem))
                }
            }
        default:
            return fmt.Errorf("incorrect wire type %v for repeated field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint) or 1 (length-delimited)", wt)
        }
    {{- else -}}
        if wt != csproto.WireTypeVarint {
            return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
        }
        if v, err := dec.DecodeInt32(); err != nil {
            return fmt.Errorf("unable to decode int32 enum value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        } else {
        {{- if eq $syntax "proto2" -}}
            ev := {{.Enum | getImportPrefix }}{{.Enum.GoIdent.GoName}}(v)
            m.{{.GoName}} = &ev
        {{- else -}}
            m.{{.GoName}} = {{.Enum | getImportPrefix }}{{.Enum.GoIdent.GoName}}(v)
        {{- end -}}
        }
    {{- end -}}
{{- else if eq $kind "fixed32" "fixed64" -}}
    {{- $bitSize := (.Desc.Kind | string | trunc -2) -}}
    {{- if eq $cardinality "repeated" -}}
        switch wt {
        case csproto.WireTypeFixed{{$bitSize}}:
            if v, err := dec.DecodeFixed{{$bitSize}}(); err != nil {
                return fmt.Errorf("unable to decode uint{{$bitSize}} value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v)
            }
        case csproto.WireTypeLengthDelimited:
            if v, err := dec.DecodePackedFixed{{$bitSize}}(); err != nil {
                return fmt.Errorf("unable to decode packed uint{{$bitSize}} values for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v...)
            }
        default:
            return fmt.Errorf("incorrect wire type %v for repeated field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32"}}5 (32-bit){{else}}1 (64-bit){{end}} or 1 (length-delimited)", wt)
        }
    {{- else -}}
        if wt != csproto.WireTypeFixed{{$bitSize}} {
            return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32"}}5 (32-bit){{else}}1 (64-bit){{end}}", wt)
        }
        if v, err := dec.DecodeFixed{{$bitSize}}(); err != nil {
            return fmt.Errorf("unable to decode uint{{$bitSize}} value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        } else {
            m.{{.GoName}} = {{if eq $syntax "proto2"}}csproto.Uint{{$bitSize}}(v){{else}}v{{end}}
        }
    {{- end -}}
{{- else if eq $kind "sint32" "sint64" -}}
    {{- $bitSize := (.Desc.Kind | string | trunc -2) -}}
    {{- if eq $cardinality "repeated" -}}
        switch wt {
        case csproto.WireTypeVarint:
            if v, err := dec.DecodeSInt{{$bitSize}}(); err != nil {
                return fmt.Errorf("unable to decode sint{{$bitSize}} value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v)
            }
        case csproto.WireTypeLengthDelimited:
            if v, err := dec.DecodePackedSint{{$bitSize}}(); err != nil {
                return fmt.Errorf("unable to decode packed sint{{$bitSize}} values for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = append(m.{{.GoName}}, v...)
            }
        default:
            return fmt.Errorf("incorrect wire type %v for repeated field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint) or 1 (length-delimited)", wt)
        }
    {{- else -}}
        if wt != csproto.WireTypeVarint {
            return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
        }
        if v, err := dec.DecodeSInt{{$bitSize}}(); err != nil {
            return fmt.Errorf("unable to decode sint{{$bitSize}} value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
        } else {
            m.{{.GoName}} = {{if eq $syntax "proto2"}}csproto.Int{{$bitSize}}(v){{else}}v{{end}}
        }
    {{- end -}}
{{- else -}}
        panic(fmt.Errorf("unsupported proto kind '{{$kind}}'"))
{{- end -}}
{{ end }}
{{/* UnmarshalString - generates the snippet to unmarshal a string field */}}
{{ define "UnmarshalString" }}
{{- $syntax := (.Desc.Syntax | string) -}}
{{- $cardinality := (.Desc.Cardinality | string) -}}
            if wt != csproto.WireTypeLengthDelimited {
                return fmt.Errorf("incorrect wire type %v for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", wt)
            }
            if s, err := dec.DecodeString(); err != nil {
                return fmt.Errorf("unable to decode string value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
    {{- if eq $cardinality "repeated" -}}
            m.{{.GoName}} = append(m.{{.GoName}}, s)
    {{- else if eq $syntax "proto2" -}}
            m.{{.GoName}} = csproto.String(s)
    {{- else -}}
            m.{{.GoName}} = s
    {{- end -}}
            }
{{ end }}
{{/* UnmarshalBytes - generates the snippet to unmarshal a bytes field */}}
{{ define "UnmarshalBytes" }}
            if wt != csproto.WireTypeLengthDelimited {
                return fmt.Errorf("incorrect wire type %v for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", wt)
            }
            if b, err := dec.DecodeBytes(); err != nil {
                return fmt.Errorf("unable to decode bytes value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                m.{{.GoName}} = {{if eq (.Desc.Cardinality | string) "repeated"}}append(m.{{.GoName}}, b){{else}}b{{end}}
            }
{{ end }}
{{/* UnmarshalSFixed - generates the snippet to unmarshal a signed, fixed-size integer (sfixed32,sfixed64) field */}}
{{ define "UnmarshalSFixed" }}
{{- $syntax := (.Desc.Syntax | string) -}}
{{- $cardinality := (.Desc.Cardinality | string) -}}
{{- $bitSize := (.Desc.Kind | string | trunc -2) -}}
            if wt != csproto.WireTypeFixed{{$bitSize}} {
                return fmt.Errorf("incorrect wire type %v for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32" }}5 (32-bit){{else}}1 (64-bit){{end}}", wt)
            }
            if v, err := dec.DecodeFixed{{$bitSize}}(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
    {{- if eq $cardinality "repeated" -}}
                m.{{.GoName}} = append(m.{{.GoName}}, int{{$bitSize}}(v))
    {{- else if eq $syntax "proto2" -}}
                iv := int{{$bitSize}}(v)
                m.{{.GoName}} = &iv
    {{- else -}}
                m.{{.GoName}} = int{{$bitSize}}(v)
    {{- end -}}
            }
{{ end }}
{{/* UnmarshalMapEntry - generates the snippet to unmarshal a map entry "message" */}}
{{- define "UnmarshalMapEntry" -}}
    {{- $mapField := . -}}
    {{- $mapKeyKind := .Desc.MapKey.Kind | string -}}
    {{- $valDef := .Desc.MapValue -}}
    {{- $mapValueKind := $valDef.Kind | string }}
        if m.{{.GoName}} == nil {
            m.{{.GoName}} = make({{mapFieldGoType .}})
        }
        // consume the map entry size
        // TODO - should we validate this?
        if _, err = dec.DecodeInt32(); err != nil {
            return err
        }
        // always 2 values
        var (
    {{ if eq $mapKeyKind "int32" "int64" "sint32" "sint64" "sfixed32" "sfixed64" -}}
            entryKey int{{$mapKeyKind | trunc -2}}
    {{- else if eq $mapKeyKind "uint32" "uint64" "fixed32" "fixed64" -}}
            entryKey uint{{$mapKeyKind | trunc -2}}
    {{- else if eq $mapKeyKind "string" -}}
            entryKey string
    {{- else -}}
            entryKey ??? // invalid map entry key type: {{$mapKeyKind}}
    {{- end }}
    {{ if eq $mapValueKind "int32" "int64" "sint32" "sint64" "sfixed32" "sfixed64" -}}
            entryValue int{{$mapValueKind | trunc -2}}
    {{- else if eq $mapValueKind "uint32" "uint64" "fixed32" "fixed64" -}}
            entryValue uint{{$mapValueKind | trunc -2}}
    {{- else if eq $mapValueKind "float" "double" -}}
            entryValue float{{if eq $mapValueKind "float"}}32{{else}}64{{end}}
    {{- else if eq $mapValueKind "bool" -}}
            entryValue bool
    {{- else if eq $mapValueKind "enum" -}}
        {{- $valField := (index .Message.Fields 1) -}}
            entryValue {{$valField.Enum | getImportPrefix}}{{$valField.Enum.GoIdent.GoName}}
    {{- else if eq $mapValueKind "string" -}}
            entryValue string
    {{- else if eq $mapValueKind "bytes" -}}
            entryValue []byte
    {{- else if eq $mapValueKind "message" -}}
        {{- $valField := (index .Message.Fields 1) -}}
            entryValue *{{$valField.Message | getImportPrefix}}{{$valField.Message.GoIdent.GoName}}
    {{- else -}}
            entryValue ??? // invalid map entry value type: {{$mapValueKind}}
    {{- end }}
        )
        for i := 0; i < 2; i++ {
            etag, ewt, err := dec.DecodeTag()
            if err != nil {
                return err
            }
            switch etag {
            case 1: // key
        {{ if eq $mapKeyKind "int32" "int64" -}}
                if ewt != csproto.WireTypeVarint {
                    return fmt.Errorf("incorrect wire type %v for map key for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", ewt)
                }
                if entryKey, err = dec.DecodeInt{{$mapKeyKind | trunc -2}}(); err != nil {
                    return err
                }
        {{- else if eq $mapKeyKind "uint32" "uint64" -}}
                if ewt != csproto.WireTypeVarint {
                    return fmt.Errorf("incorrect wire type %v for map key for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", ewt)
                }
                if entryKey, err = dec.DecodeUint{{$mapKeyKind | trunc -2}}(); err != nil {
                    return err
                }
        {{- else if eq $mapKeyKind "sint32" "sint64" -}}
                if ewt != csproto.WireTypeVarint {
                    return fmt.Errorf("incorrect wire type %v for map key for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", ewt)
                }
                if entryKey, err = dec.DecodeSInt{{$mapKeyKind | trunc -2}}(); err != nil {
                    return err
                }
        {{- else if eq $mapKeyKind "fixed32" "sfixed32" "fixed64" "sfixed64" -}}
            {{- $bitSize := $mapKeyKind | trunc -2 -}}
                if ewt != csproto.WireTypeFixed{{$bitSize}} {
                    return fmt.Errorf("incorrect wire type %v for map key for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32"}}5{{else}}1{{end}} (fixed{{$bitSize}})", ewt)
                }
                if entryKey, err = dec.DecodeFixed{{$bitSize}}(); err != nil {
                    return err
                }
        {{- else if eq $mapKeyKind "string" -}}
                if ewt != csproto.WireTypeLengthDelimited {
                    return fmt.Errorf("incorrect wire type %v for map key for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", ewt)
                }
                if entryKey, err = dec.DecodeString(); err != nil {
                    return err
                }
        {{- end }}
            case 2: // value
        {{ if eq $mapValueKind "bool" -}}
                if ewt != csproto.WireTypeVarint {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", ewt)
                }
                if entryValue, err = dec.DecodeBool(); err != nil {
                    return err
                }
        {{- else if eq $mapValueKind "int32" "int64" -}}
                if ewt != csproto.WireTypeVarint {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", ewt)
                }
                if entryValue, err = dec.DecodeInt{{$mapValueKind | trunc -2}}(); err != nil {
                    return err
                }
        {{- else if eq $mapValueKind "uint32" "uint64" -}}
                if ewt != csproto.WireTypeVarint {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", ewt)
                }
                if entryValue, err = dec.DecodeUInt{{$mapValueKind | trunc -2}}(); err != nil {
                    return err
                }
        {{- else if eq $mapValueKind "sint32" "sint64" -}}
                if ewt != csproto.WireTypeVarint {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", ewt)
                }
                if entryValue, err = dec.DecodeSInt{{$mapValueKind | trunc -2}}(); err != nil {
                    return err
                }
        {{- else if eq $mapValueKind "fixed32" "fixed64" -}}
            {{- $bitSize := $mapValueKind | trunc -2 -}}
                if ewt != csproto.WireTypeFixed{{$bitSize}} {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32"}}5{{else}}1{{end}} (fixed{{$bitSize}})", ewt)
                }
                if entryValue, err = dec.DecodeFixed{{$bitSize}}(); err != nil {
                    return err
                }
        {{- else if eq $mapValueKind "sfixed32" "sfixed64" -}}
            {{- $bitSize := $mapValueKind | trunc -2 -}}
                if ewt != csproto.WireTypeFixed{{$bitSize}} {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32"}}5{{else}}1{{end}} (fixed{{$bitSize}})", ewt)
                }
                if sv, err := dec.DecodeFixed{{$bitSize}}(); err != nil {
                    return err
                } else {
                    entryValue = int{{$bitSize}}(sv)
                }
        {{- else if eq $mapValueKind "float" "double" -}}
            {{- $bitSize := "32" -}}
            {{- if eq $mapValueKind "double" -}}{{- $bitSize = "64" -}}{{- end -}}
                if ewt != csproto.WireTypeFixed{{$bitSize}} {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32"}}5{{else}}1{{end}} (fixed{{$bitSize}})", ewt)
                }
                if entryValue, err = dec.DecodeFloat{{$bitSize}}(); err != nil {
                    return err
                }
        {{- else if eq $mapValueKind "string" -}}
                if ewt != csproto.WireTypeLengthDelimited {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", ewt)
                }
                if entryValue, err = dec.DecodeString(); err != nil {
                    return err
                }
        {{- else if eq $mapValueKind "bytes" -}}
                if ewt != csproto.WireTypeLengthDelimited {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", ewt)
                }
                if entryValue, err = dec.DecodeBytes(); err != nil {
                    return err
                }
        {{- else if eq $mapValueKind "enum" -}}
            {{- $valField := (index .Message.Fields 1) -}}
                if ewt != csproto.WireTypeVarint {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", ewt)
                }
                if v, err := dec.DecodeInt32(); err != nil {
                    return err
                } else {
                    entryValue = {{$valField.Enum | getImportPrefix }}{{$valField.Enum.GoIdent.GoName}}(v)
                }
        {{- else if eq $mapValueKind "message" -}}
            {{- $valField := (index .Message.Fields 1) -}}
                if ewt != csproto.WireTypeLengthDelimited {
                    return fmt.Errorf("incorrect wire type %v for map value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", ewt)
                }
                var v {{$valField.Message | getImportPrefix}}{{$valField.Message.GoIdent.GoName}}
                if err = dec.DecodeNested(&v); err != nil {
                    return err
                } else {
                    entryValue = &v
                }
        {{- end }}
            default:
                return fmt.Errorf("invalid map entry field tag %d, expected 1 or 2", etag)
            }
        }
        m.{{.GoName}}[entryKey] = entryValue
{{- end -}}
{{/* UnmarshalMessage - generates the snippet to unmarshal a nested message field */}}
{{- define "UnmarshalMessage" -}}
            if wt != csproto.WireTypeLengthDelimited {
                return fmt.Errorf("incorrect wire type %v for {{if .Desc.IsMap}}map {{end}}field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", wt)
            }
    {{ if .Desc.IsMap -}}
        {{- template "UnmarshalMapEntry" . -}}
    {{- else -}}
            var mm {{.Message | getImportPrefix }}{{.Message.GoIdent.GoName}}
            if err = dec.DecodeNested(&mm); err != nil {
                return fmt.Errorf("unable to decode message value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            }
            m.{{.GoName}} = {{if eq (.Desc.Cardinality | string) "repeated"}}append(m.{{.GoName}}, &mm){{else}}&mm{{end}}
    {{- end -}}
{{- end -}}
{{/* UnmarshalField - generates the snippet to unmarshal a field */}}
{{ define "UnmarshalField" }}
{{- $kind := (.Desc.Kind | string) -}}
    {{- if eq $kind "bool" "int32" "int64" "uint32" "uint64" "sint32" "sint64" "fixed32" "float" "fixed64" "double" "enum" -}}{{template "UnmarshalNumber" .}}{{- end -}}
    {{- if eq $kind "string" -}}{{template "UnmarshalString" .}}{{- end -}}
    {{- if eq $kind "bytes" -}}{{template "UnmarshalBytes" .}}{{- end -}}
    {{- if eq $kind "sfixed32" "sfixed64" -}}{{template "UnmarshalSFixed" .}}{{- end -}}
    {{- if eq $kind "message" -}}{{template "UnmarshalMessage" .}}{{- end -}}
{{ end }}
{{/* UnmarshalOneOf - generates the snippet to unmarshal a oneof field */}}
{{ define "UnmarshalOneOf" }}
{{- $msgDef := .Parent -}}
{{- $oneOf := . -}}
    {{- range .Fields -}}
        {{- $kind := (.Desc.Kind | string) -}}
        case {{.Desc.Number}}: // {{$oneOf.Desc.Name}}.{{.Desc.Name}} (oneof,{{.Desc.Kind}})
            var ov {{$msgDef.Desc.Name}}_{{.GoName}}
        {{ if eq $kind "bool" -}}
            if wt != csproto.WireTypeVarint {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
            }
            if v, err := dec.DecodeBool(); err != nil {
                return fmt.Errorf("unable to decode boolean value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind "int32" -}}
            if wt != csproto.WireTypeVarint {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
            }
            if v, err := dec.DecodeInt32(); err != nil {
                return fmt.Errorf("unable to decode int32 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind  "int64" -}}
            if wt != csproto.WireTypeVarint {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
            }
            if v, err := dec.DecodeInt64(); err != nil {
                return fmt.Errorf("unable to decode int64 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind  "uint32" -}}
            if wt != csproto.WireTypeVarint {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
            }
            if v, err := dec.DecodeUInt32(); err != nil {
                return fmt.Errorf("unable to decode uint32 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind  "uint64" -}}
            if wt != csproto.WireTypeVarint {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
            }
            if v, err := dec.DecodeUInt64(); err != nil {
                return fmt.Errorf("unable to decode uint64 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind  "sint32" -}}
            if wt != csproto.WireTypeVarint {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
            }
            if v, err := dec.DecodeSInt32(); err != nil {
                return fmt.Errorf("unable to decode sint32 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind  "sint64" -}}
            if wt != csproto.WireTypeVarint {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
            }
            if v, err := dec.DecodeSInt64(); err != nil {
                return fmt.Errorf("unable to decode sint64 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind  "fixed32" "fixed64" -}}
            {{- $bitSize := (.Desc.Kind | string | trunc -2) -}}
            if wt != csproto.WireTypeFixed{{$bitSize}} {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32"}}5 (32-bit){{else}}1 (64-bit){{end}}", wt)
            }
            if v, err := dec.DecodeFixed{{$bitSize}}(); err != nil {
                return fmt.Errorf("unable to decode uint{{$bitSize}} value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind  "float" "double" -}}
            {{- $bitSize := "32" -}}
            {{- if eq $kind "double" -}}{{$bitSize = "64"}}{{- end -}}
            if wt != csproto.WireTypeFixed{{$bitSize}} {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32"}}5 (32-bit){{else}}1 (64-bit){{end}}", wt)
            }
            if v, err := dec.DecodeFixed{{$bitSize}}(); err != nil {
                return fmt.Errorf("unable to decode {{$kind}} value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind "sfixed32" "sfixed64" -}}
            {{- $bitSize := (.Desc.Kind | string | trunc -2) -}}
            if wt != csproto.WireTypeFixed{{$bitSize}} {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected {{if eq $bitSize "32"}}5 (32-bit){{else}}1 (64-bit){{end}}", wt)
            }
            if v, err := dec.DecodeFixed{{$bitSize}}(); err != nil {
                return fmt.Errorf("unable to decode {{$kind}} value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = v
            }
        {{- else if eq $kind "enum" -}}
            if wt != csproto.WireTypeVarint {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 0 (varint)", wt)
            }
            if v, err := dec.DecodeInt32(); err != nil {
                return fmt.Errorf("unable to decode int32 value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = {{.Enum.GoIdent.GoName}}(v)
            }
        {{- else if eq $kind "string" -}}
            if wt != csproto.WireTypeLengthDelimited {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", wt)
            }
            if s, err := dec.DecodeString(); err != nil {
                return fmt.Errorf("unable to decode string value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = s
            }
        {{- else if eq $kind "bytes" -}}
            if wt != csproto.WireTypeLengthDelimited {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", wt)
            }
            if b, err := dec.DecodeBytes(); err != nil {
                return fmt.Errorf("unable to decode bytes value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = b
            }
        {{- else if eq $kind "message" -}}
            if wt != csproto.WireTypeLengthDelimited {
                return fmt.Errorf("incorrect wire type %v for tag field '{{.Desc.Name}}' (tag={{.Desc.Number}}), expected 2 (length-delimited)", wt)
            }
            var mm_{{.Desc.Name}} {{.Message.GoIdent.GoName}}
            if err = dec.DecodeNested(&mm_{{.Desc.Name}}); err != nil {
                return fmt.Errorf("unable to decode message value for field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                ov.{{.GoName}} = &mm_{{.Desc.Name}}
            }
        {{- end }}
            m.{{$oneOf.GoName}} = &ov
    {{ end -}}
{{ end }}
{{/* UnmarhsalExtension - generates the snippet to unmarshal a proto2 extension field */}}
{{ define "UnmarshalExtension" }}
{{- $kind := (.Desc.Kind) | string -}}
        case {{.Desc.Number}}: // {{.Desc.Name}} (extension,{{.Desc.Kind}})
    {{ if eq $kind "bool" -}}
            if v, err := dec.DecodeBool(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "int32" -}}
            if v, err := dec.DecodeInt32(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "int64" -}}
            if v, err := dec.DecodeInt64(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "uint32" -}}
            if v, err := dec.DecodeUInt32(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "uint64" -}}
            if v, err := dec.DecodeUInt64(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "sint32" -}}
            if v, err := dec.DecodeSInt32(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "sint64" -}}
            if v, err := dec.DecodeSInt64(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "fixed32" "sfixed32" -}}
            if v, err := dec.DecodeFixed32(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "float" -}}
            if v, err := dec.DecodeFloat32(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "fixed64" "sfixed64" -}}
            if v, err := dec.DecodeFixed64(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "double" -}}
            if v, err := dec.DecodeFloat64(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "enum" -}}
    {{- else if eq $kind "string" -}}
            if v, err := dec.DecodeString(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "bytes" -}}
            if v, err := dec.DecodeBytes(); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, v); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- else if eq $kind "message" -}}
            var mm_{{.Desc.Name}} {{.Message.GoIdent.GoName}}
            if err := dec.DecodeNested(&mm_{{.Desc.Name}}); err != nil {
                return fmt.Errorf("unable to decode {{.Desc.Kind}} field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
            } else {
                if err = csproto.SetExtension(m, E_{{.GoIdent.GoName}}, &mm_{{.Desc.Name}}); err != nil {
                    return fmt.Errorf("unable to set extension field '{{.Desc.Name}}' (tag={{.Desc.Number}}): %w", err)
                }
            }
    {{- end -}}
{{ end }}
